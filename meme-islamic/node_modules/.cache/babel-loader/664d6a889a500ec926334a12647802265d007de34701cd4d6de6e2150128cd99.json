{"ast":null,"code":"var _jsxFileName = \"D:\\\\mk memes\\\\meme-islamic\\\\src\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport memeData from './mockData'; // Ensure this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [topText, setTopText] = useState('');\n  const [bottomText, setBottomText] = useState('');\n  const [currentMeme, setCurrentMeme] = useState(null);\n  const handleGenerateMeme = () => {\n    const randomIndex = Math.floor(Math.random() * memeData.length);\n    setCurrentMeme(memeData[randomIndex]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Meme Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        value: topText,\n        onChange: e => setTopText(e.target.value),\n        className: \"text-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        value: bottomText,\n        onChange: e => setBottomText(e.target.value),\n        className: \"text-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateMeme,\n        className: \"generate-button\",\n        children: \"Gen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), currentMeme && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme-image-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentMeme.image,\n        alt: currentMeme.title,\n        className: \"meme-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme-text top\",\n        children: topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme-text bottom\",\n        children: bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"Unpt4v5x914jBbrsV8vPxgsUpRA=\");\n_c = Home;\nexport default Home;\n\n// import React, { useState } from 'react';\n// import memeData from './mockData'; // Ensure this path is correct\n// import GenerateButton from './components/GenerateButton'; // Ensure this path is correct\n\n// function Home() {\n//   const [currentMeme, setCurrentMeme] = useState(null);\n\n//   const handleGenerateMeme = () => {\n//     const randomIndex = Math.floor(Math.random() * memeData.length);\n//     setCurrentMeme(memeData[randomIndex]);\n//   };\n\n//   return (\n//     <div className=\"home-container\">\n//       <GenerateButton onClick={handleGenerateMeme} />\n//       {currentMeme && (\n//         <div className=\"meme-image-container\">\n//           <h2>{currentMeme.title}</h2>\n//           <img src={currentMeme.image} alt={currentMeme.title} />\n//           <p>{currentMeme.description}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","memeData","jsxDEV","_jsxDEV","Home","_s","topText","setTopText","bottomText","setBottomText","currentMeme","setCurrentMeme","handleGenerateMeme","randomIndex","Math","floor","random","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","src","image","alt","title","_c","$RefreshReg$"],"sources":["D:/mk memes/meme-islamic/src/Home.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport memeData from './mockData'; // Ensure this path is correct\r\n\r\nfunction Home() {\r\n  const [topText, setTopText] = useState('');\r\n  const [bottomText, setBottomText] = useState('');\r\n  const [currentMeme, setCurrentMeme] = useState(null);\r\n\r\n  const handleGenerateMeme = () => {\r\n    const randomIndex = Math.floor(Math.random() * memeData.length);\r\n    setCurrentMeme(memeData[randomIndex]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Meme Generator</h1>\r\n      <div className=\"form-container\">\r\n        <input \r\n          type=\"text\" \r\n          placeholder=\"Top text\" \r\n          value={topText}\r\n          onChange={(e) => setTopText(e.target.value)} \r\n          className=\"text-input\"\r\n        />\r\n        <input \r\n          type=\"text\" \r\n          placeholder=\"Bottom text\" \r\n          value={bottomText}\r\n          onChange={(e) => setBottomText(e.target.value)} \r\n          className=\"text-input\"\r\n        />\r\n        <button onClick={handleGenerateMeme} className=\"generate-button\">Gen</button>\r\n      </div>\r\n      {currentMeme && (\r\n        <div className=\"meme-image-container\">\r\n          <img src={currentMeme.image} alt={currentMeme.title} className=\"meme-image\" />\r\n          <div className=\"meme-text top\">{topText}</div>\r\n          <div className=\"meme-text bottom\">{bottomText}</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import memeData from './mockData'; // Ensure this path is correct\r\n// import GenerateButton from './components/GenerateButton'; // Ensure this path is correct\r\n\r\n// function Home() {\r\n//   const [currentMeme, setCurrentMeme] = useState(null);\r\n\r\n//   const handleGenerateMeme = () => {\r\n//     const randomIndex = Math.floor(Math.random() * memeData.length);\r\n//     setCurrentMeme(memeData[randomIndex]);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"home-container\">\r\n//       <GenerateButton onClick={handleGenerateMeme} />\r\n//       {currentMeme && (\r\n//         <div className=\"meme-image-container\">\r\n//           <h2>{currentMeme.title}</h2>\r\n//           <img src={currentMeme.image} alt={currentMeme.title} />\r\n//           <p>{currentMeme.description}</p>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}